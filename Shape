//圆 radius最大0.5 width最大也为0.5
#define SMOOTH(r,R) (.01-smoothstep(R-.01,R+.01, r))
fixed circle(fixed2 uv, fixed2 center, fixed radius, fixed width)
{
		fixed r = length(uv - center);
		return SMOOTH(r-width/2.0,radius)-SMOOTH(r+width/2.0,radius);
}

//直线 x<0.5 x>-0.5
#define LINE(a,b,x) ( smoothstep(a-.01,a+.01,x)*(1-smoothstep(b-.01,b+.01,x)) )
// LINE(0,0.01,uv.x-c.x-_Offset) *fixed4(1,0,0,1)  // uvx  就是竖线   nvy就是横线

//直线 同上
#define RANGE(a,b,x) ( step(a,x)*(1.0-step(b,x)) )

//跳动的心
				fixed2 uv = (i.uv-0.5)*2;
				fixed3 bg = fixed3(1.0,0.8,0.7-0.07*uv.y)*(1.0-0.25*length(uv));

				// animate
				float tt = mod(_Time.y,1.5)/1.5;
				float ss = pow(tt,.2)*0.5 + 0.5;
				ss = 1.0 + ss*0.5*sin(tt*6.2831*3.0 + uv.y*0.5)*exp(-tt*4.0);
				uv *= fixed2(0.5,1.5) + ss*fixed2(0.5,-0.5);

				    // shape
				#if 0
					uv *= 0.8;
					uv.y = -0.1 - uv.y*1.2 + abs(uv.x)*(1.0-abs(uv.x));
					float r = length(uv);
					float d = 0.5;
				#else
					uv.y -= 0.25;
					float a = atan2(uv.x,uv.y)/3.141593;
					float r = length(uv);
					float h = abs(a);
					float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);
				#endif

					// color
					float s = 0.75 + 0.75*uv.x;
					s *= 1.0-0.4*r;
					s = 0.3 + 0.7*s;
					s *= 0.5+0.5*pow( 1.0-clamp(r/d, 0.0, 1.0 ), 0.1 );
					fixed3 hcol = fixed3(1.0,0.5*r,0.3)*s;
	
					fixed3 col = lerp( bg, hcol, smoothstep( -0.01, 0.01, d-r) );
